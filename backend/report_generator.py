"""
Report Generator: Create PDF reports from conversation history
"""
from reportlab.lib.pagesizes import letter
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, PageBreak
from reportlab.lib.enums import TA_LEFT, TA_CENTER
from datetime import datetime
from pathlib import Path
import logging

logger = logging.getLogger(__name__)

def create_report_pdf(conversation_history) -> str:
    """
    Generate a PDF report from conversation history
    
    Args:
        conversation_history: List of message objects from LangChain memory
        
    Returns:
        str: Path to generated PDF file
    """
    try:
        # Create reports directory if it doesn't exist
        reports_dir = Path("data/reports")
        reports_dir.mkdir(parents=True, exist_ok=True)
        
        # Generate filename with timestamp
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        pdf_path = reports_dir / f"conversation_report_{timestamp}.pdf"
        
        # Create PDF document
        doc = SimpleDocTemplate(
            str(pdf_path),
            pagesize=letter,
            rightMargin=0.75*inch,
            leftMargin=0.75*inch,
            topMargin=0.75*inch,
            bottomMargin=0.75*inch
        )
        
        # Container for the 'Flowable' objects
        elements = []
        
        # Define styles
        styles = getSampleStyleSheet()
        
        title_style = ParagraphStyle(
            'CustomTitle',
            parent=styles['Heading1'],
            fontSize=24,
            textColor='#1a73e8',
            spaceAfter=30,
            alignment=TA_CENTER
        )
        
        subtitle_style = ParagraphStyle(
            'CustomSubtitle',
            parent=styles['Normal'],
            fontSize=12,
            textColor='#5f6368',
            spaceAfter=20,
            alignment=TA_CENTER
        )
        
        question_style = ParagraphStyle(
            'Question',
            parent=styles['Normal'],
            fontSize=11,
            textColor='#1967d2',
            fontName='Helvetica-Bold',
            spaceAfter=6,
            leftIndent=0
        )
        
        answer_style = ParagraphStyle(
            'Answer',
            parent=styles['Normal'],
            fontSize=10,
            textColor='#202124',
            spaceAfter=20,
            leftIndent=20
        )
        
        # Add title
        title = Paragraph("RAG Assistant Conversation Report", title_style)
        elements.append(title)
        
        # Add metadata
        timestamp_text = datetime.now().strftime("%B %d, %Y at %I:%M %p")
        subtitle = Paragraph(f"Generated on {timestamp_text}", subtitle_style)
        elements.append(subtitle)
        elements.append(Spacer(1, 0.3*inch))
        
        # Add conversation summary
        total_exchanges = len(conversation_history) // 2
        summary = Paragraph(
            f"<b>Total Exchanges:</b> {total_exchanges}",
            styles['Normal']
        )
        elements.append(summary)
        elements.append(Spacer(1, 0.3*inch))
        
        # Process conversation history
        for i, message in enumerate(conversation_history):
            message_type = message.type  # 'human' or 'ai'
            content = message.content
            
            # Escape HTML special characters
            content = content.replace('&', '&amp;')
            content = content.replace('<', '&lt;')
            content = content.replace('>', '&gt;')
            
            if message_type == 'human':
                # User question
                question_num = (i // 2) + 1
                question_text = f"Q{question_num}: {content}"
                elements.append(Paragraph(question_text, question_style))
            else:
                # AI answer
                answer_text = f"{content}"
                elements.append(Paragraph(answer_text, answer_style))
                elements.append(Spacer(1, 0.15*inch))
        
        # Add footer
        elements.append(Spacer(1, 0.5*inch))
        footer = Paragraph(
            "<i>This report was automatically generated by the RAG Assistant system.</i>",
            ParagraphStyle(
                'Footer',
                parent=styles['Normal'],
                fontSize=8,
                textColor='#5f6368',
                alignment=TA_CENTER
            )
        )
        elements.append(footer)
        
        # Build PDF
        doc.build(elements)
        logger.info(f"Report generated successfully: {pdf_path}")
        
        return str(pdf_path)
    
    except Exception as e:
        logger.error(f"Error generating PDF report: {str(e)}")
        raise
